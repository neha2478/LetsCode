Notes Link:- https://www.pythoncheatsheet.org/cheatsheet/built-in-functions
                https://www.datacamp.com/tutorial/data-structures-python
                https://www.pythoncheatsheet.org/cheatsheet/lists-and-tuples



Abstract Data Type and Data Structures
Primitive Data Structures
Integers
Float
Strings
Boolean


Non-Primitive Data Structures
Arrays
Lists
Tuples
Dictionary
Sets
Files



Here we will keep a note for Python ....

"""  print() function how 
# print(" Shruti ")
# print(" Kundan ")

# print(my_var:= "Hello World!")

# my_var1 = "Yes"
# print(my_var1)

# print(my_var2 := "Hello Kundan and Nilesh!!")

"""  How to define the Function in Pytho  we use def keyword """
# def foo():

# The above is an empty function...


a = 1
print('Hello World!', a)
#here we are passing a variable as a an argument ......

b = 12
print('Hello Shruti' , b)




#For Loop :- To iterate on each elememt in Python

The end keyword
The keyword argument end can be used to avoid the newline after the output, or end the output with a different string:

phrase = ['printed' , 'with' , 'a', 'dash' , 'in', 'between']

print("The words in the Phrase :")
# here i is the index for the for Loop we took 

for i in phrase:
        print( i , end= ' , ')
"""
    sep - this keyword is to specify how to seperate the objects, if there is more than one:
print('Shruti', 'Kundan' , 'Nilesh' , sep = ' , ')

greeting = 'Hello'
greeting += ' World! '

print(greeting)

number = 1
number += 5
print(number)

my_list = ['item']
my_list *= 3
print(my_list)

#input()   -   This function takes the input from the user and converts it into a string:

`input() can also set a default message without using print():` print()
>>> my_name = input('Where is your name? ')
>>> print('Hi, {}'.format(my_name))

It is also possible to use formatted strings to avoid using .format:

print('What is your name?')
my_name = input()
print('Hi, {}' .format(my_name))
#another way to do so is...
print(f'Hi , {my_name}')



The len() Function :- 
Evaluates to the integer value of the number of characters in a string, list, dictionary, etc.:

>>> len('hello')
#5


a = 'hello'
print(len(a))

print(len(['cat', 3 , 'dog'])) # here we can pass the List in the len() any datatype of Function


#Errors that I'm Facing.....
1> Causes of SyntaxError: invalid syntax, Missing a colon ( : ) at the end of a line or mixing up other symbols. 
Missing a colon ( : ) at the end of a line or mixing up other symbols.

What does an indent look like?
In a composition, an indentation is a blank space between a margin and the beginning of a line of text. The beginning of this paragraph is indented. Standard paragraph
indentation is about five spaces or one-quarter to one-half of an inch, depending on which style guide you follow.

2> The Unexpected Indent Error is a common syntax error in Python that occurs when the interpreter encounters an indentation that it does not expect.



# print(len(['cat', 3 , 'dog'])) # here we can pass the List in the len() any datatype of Function


# a = ['Shruti', 'Neha', 'Jojo', 'Rehman']
# b = input() 
# if len(a) > 0:
#     print("the list is not empty")

# elif a[i] != b:
#     print("Not Found")
    
# elif a[i] == b:
#     print("It's there", a)

# else :
#     print("Come out!!")
    
    #Example :
    
# x = 200
# if x > 15:
#     print("x is greater than 15")
# elif x > 10:
#     print("x is greater than 10")
# elif x > 5:
#     print("x is greater than 5")


#The functions ofdatatype:-
"""
These are the built in datatypes
numeric  types - [ int() , float() , complex() , str() , boolean()]
Collection types  - [list, tuple, dict , set]
"""
print(str(35)) # first it will convert the 35 in string than print() it  will print that .....

print(bool(26))
print(int('11'))
print(float('3.14'))


#### CONCATENATION OF STRINGS IN PYTHON
a = 'Alice'
c = a + ' Shruti'
print(c)

print('Alice' +  ' Shraddha')

print('Alice ' * 8) #Alice Alice Alice Alice Alice Alice Alice Alice

print('Alice ' ' Bob') #Alice Bob


Python Built-in Functions :-
The Python interpreter has a number of functions and types built into it that are always available.
1> abs()        -      	Return the absolute value of a number. 
        
        #integer Number
        a = -45
        print('Absolute value of integer is:' , abs(a)) #Absolute value of integer is: 45
        
        #floating Number
        b = -54.56
        print('Absolute value of integer is:' , abs(b)) #Absolute value of integer is: 54.56
        
        #A complex Number
        c = (5 + 6j)
        d = (7 - 6j)
        print('Absolute value of integer is:', abs(c)) #Absolute value of integer is: 7.810249675906654
        print('Absolute value of integer is:', "c = ", abs(c), "," ,"d = " , abs(d))  #Absolute value of integer is: c =  7.810249675906654 , d =  9.219544457292887


2> aiter()      -          Return an asynchronous iterator for an asynchronous iterable.  

3> all()         -        Return True if all elements of the iterable are true.

4> any()        -        	Return True if any element of the iterable is true.

5> ascii()        -        Return a string with a printable representation of an object.

6> bin()        -        Convert an integer number to a binary string.

7> bool()        -        	Return a Boolean value.

8> breakpoint()        -        
# An code example that we can practice is :

#Function to calculate Speed
def cal_speed(dist, time):
    print(" Distance(km) :", dist)
    print(" Time(hr) :", time)
    return dist/time
    
#Function to calculate distance traveled
def cal_dis(speed, time):
    print(" Time(hr) :" , time)
    print("Speed(km/hr) :" , speed)
    return speed * time
    
#Function to calculate the time taken
def cal_time(dist , speed):
    print(" Distance(km) :" , dist)
    print(" Speed(km / hr) :" , speed)
    return speed / dist
 
#Driver code   
#calling the functions

a = cal_speed(abs(45.9), abs(-2)) # passing the abs values to the Actual parameter while calling the Function
print("The calculated Speed(km / hr) :" , a)
print("") # for to print space for next Line...

b = cal_dis(abs(-62.9) , abs(2.5))
print("The calculated Distance(km / hr) :" , b)
print("")

c = cal_time(abs(48.0) , abs(4.5))
print("The calculated Time(hr) :" , c)


"""
        Output :-
""""
""""
Distance(km) : 45.9
Time(hr) : 2
The calculated Speed(km / hr) : 22.95

 Time(hr) : 2.5
Speed(km/hr) : 62.9
The calculated Distance(km / hr) : 157.25

 Distance(km) : 48.0
 Speed(km / hr) : 4.5
 The calculated Time(hr) : 0.09375
""""


MATCH KEYWORD IN PYTHON!!
### Here we have used the Match -
                Match case' restricts your search to only terms with the specified capitalisation

# Learning Match , It is an alternate of Switch
# `_` is used to define a default case:

response_code = 800

match response_code:
    case 200 | 201 :
        print("OK")
    case 300 | 301 :
        print("Redirect")
    case 400 | 401 :
        print("Bad Request")
    case 500 | 501 :
        print("Internal Server Error!!")
    case _:
        print("Invalid code")


resp = 110.20
match resp:
    case int():
        print('Code is a number!!')
    
    case str():
        print('Code is a String!!')
    
    case _:
        print('Code is Invalid Number!!',resp)

# While Loop Statement :- 
s = 0

while spam < 5:
    print('Hello, World.')
    s = s + 1 # it will increment each by one.... 

# Hello, world.
# Hello, world.
# Hello, world.
# Hello, world.
# Hello, world.




Python Lists :- 
 #Python Lists
furniture = ['table' , 'chair' , 'rack', 'self']

#+ve INDEXING
print(furniture[0])
print(furniture[3])
print(furniture[2])
print(furniture[1])

#-VE INDEXING
print(furniture[-2])
#using format in Python
print(f'Thelength of {furniture[-1]} is bigger than the {furniture[-3]}')

#Sublists with Slices
print(furniture[1:3]) #[starting index: End index-1 or endindex : jump the no of index]
print(furniture[0:4])
print(furniture[0:-1])
print(furniture[:2]) # by default it will fetch teh starting index


#################_ CONCATINATION :-
print([1, 2, 3, 4, 5] + ['A' , 'B', 'C']) #adding two strings
print(['X' , 'Y', 'Z'] * 3) # Multipilication with 3 to get one result

my_list = [1, 2, 3, 4, 5]
my_list = my_list + ['A' , 'B', 'C']
print(my_list)


furniture = ['table' , 'chair' , 'rack' , 'shelf']
for item in furniture:
                print(item)


# furniture = ['table', 'chair' , 'rack', 'self']

# for index, item in enumerate(furniture):
#     print(f'index: {index} - item: {item}') # here we are doing format furniture = ['table' , 'chair' , 'rack', 'self']
    
    
furniture = ['table', 'chair', 'rack' , 'self']
price = [100, 50, 80, 40]

for item, amount in zip(furniture, price):
    print(f'The {item} costs ${amount}')




# in operator is to check weather it is there or not .
print('bed' in ['table', 'chair', 'rack' , 'self'])

# Another way 
print('rack' in furniture)
print('rack' not in furniture)


#DICTONARY :-
# we  can store data  in Dictonary in form of keys and values
'''
my_cat = {
    'size' : 'fat', 
    'color' : 'gray',
    'disposition' : 'loud'
}


#calling the Set key, value using subscript operator []
my_cat['age_years'] = 2
print(my_cat)

# another way :-Get value using subscript operator []
# A postfix expression followed by an expression in [ ] (brackets) 
print(my_cat['size'])
print(my_cat['eye_color']) # the key don't exist in dictonary

'''

# using the bracses ( Subscript ) / Another way is using
#values() - to fetch the values 
#keys() - to fetch the keys

pet = {'color': 'red', 'age': 42}

#fetch the values one by one
# for val in pet:
#     print(pet[val])
    
#using values() - The values() method gets the values of the dictionary:
# for val1 in pet.values():
#     print(val1)
    
# The keys() method gets the keys of the dictionary:
# for key in pet.keys():
#     print(key)
    
for key in pet:
    print(pet.keys())
    

#items()

pet = {'color': 'red', 'age': 42}

for i in pet.items():
    print(i)

# # ('color', 'red')
# # ('age', 42)

# for key, val in pet.items():
#     print(f'Key: {key} Value: {value}') #using format 
    
    

# #get() -  The get() method returns the value of an item with the given key. If the key doesn’t exist, it returns None:
# wife = {'name': 'Rose', 'age': 33}

# print(f'My wifes name is {wife.get("name")}')

# print(f'She is {wife.get("age")} years old.')

#Adding items with setdefault

wife = {'name': 'Rose', 'age': 33}
print(wife.setdefault('has_hair', True))
print(wife)

# >>Adding items with setdefault()

# brother = {'name': 'Rose', 'age': 33}
# if 'has_hair' not in brother:
#     brother['has_hair'] = True
    
# brother.setdefault('has_hair', True)
# print(wife)

import pprint

Dict1 = {'name': 'Rose', 'age': 33, 'has_hair': True, 'hair_color': 'brown', 'height': 1.6, 'eye_color': 'brown'}
pprint.pprint(Dict1)

# Merge two Dictonaries in python
dicta = {'a': 1 , 'b' : 2}
dictb = {'c': 3, 'd' : 4}
# print(dicta + dictb) # here we can't concatinate the two Dictonaries
dict_c = {**dicta , **dictb}


def mergeFun(dicta = {'a': 1 , 'b' : 2} , dictb = {'c': 3, 'd' : 4}):
   
    dictb = {**dicta , **dictb} # here ** is to fetch address
    mergeFun(dicta, dictb)
    print(dictb)
    

# dicta = {'a': 1 , 'b' : 2}
# dictb = {'c': 3, 'd' : 4}

#mergeFun(dicta, dictb) # calling the function and passing the actual arg

"""

# def sum(g , d):
#     print(g + d)
    
# sum(10 , 20)


# a = 10
# b = 20
# a = a + b
# print(a)
# b = a + b
# print(b)

# a = {1, 2, 3, 4, 5, 6}
# a = set([1, 2, 3, 4, 5, 6])

# # a = {}
# print(type(a))
# print(a)


#Oops Concept 

class A:
    
    def __init__(self):
        
        self.safevar = 10  #with self we can initialise the variables (instance variables)
        #initise the protectec_var with 10
        self.privatevar = 20
        

obj = A() #creating a constructor and storing it into a variable 
#hence creating an object of Myclass class
        
print(obj.safevar)

print(obj.privatevar)


# In Python, encapsulation can be achieved by using access modifiers. 
# Access modifiers are keywords that define the accessibility of attributes and methods in a class. The three access modifiers available in Python are public, private, and protected. 
#  However, Python does not have an explicit way of defining access modifiers like some other programming languages such as Java and C++.

